{"version":3,"sources":["components/Button.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","style","margin","onClick","content","Timer","setState","bind","startTimer","stopTimer","resetTimer","state","hours","minutes","seconds","hourFirst","hourLast","minFirst","minLast","secFirst","secLast","init","Date","now","this","timerID","setInterval","delta","Math","floor","toLocaleString","minimumIntegerDigits","useGrouping","slice","clearInterval","counter","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.745c6d57.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Button = props => {\n    return (\n        <button className=\"button\" style={{margin: \"0 1px\"}} onClick={props.onClick}>\n            {props.content}\n        </button>\n    )\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"./Button.js\";\n\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.setState = this.setState.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.state = {\n      // set initial state\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      hourFirst: \"0\",\n      hourLast: \"0\",\n      minFirst: \"0\",\n      minLast: \"0\",\n      secFirst: \"0\",\n      secLast: \"0\",\n    };\n  }\n\n  startTimer() {\n    const init = Date.now()  // Store initial time\n    this.timerID = setInterval(()=>{\n      \n      let delta = Date.now() - init; // Get the time that has currently passed in milliseconds\n      this.setState(state => ({\n        hours: Math.floor(delta / (1000 * 60 * 60 )) % 24,  // Get times from milliseconds\n        minutes: Math.floor(delta / (1000 * 60)),\n        seconds: Math.floor(delta / 1000) % 60,\n        hourFirst: state.hours\n          .toLocaleString(\"en-US\", {  // Format to single digits\n            minimumIntegerDigits: 2,\n            useGrouping: false,\n          })\n          .slice(0, 1),\n        hourLast: state.hours\n          .toLocaleString(\"en-US\", {\n            minimumIntegerDigits: 2,\n            useGrouping: false,\n          })\n          .slice(1, 2),\n        minFirst: state.minutes\n          .toLocaleString(\"en-US\", {\n            minimumIntegerDigits: 2,\n            useGrouping: false,\n          })\n          .slice(0, 1),\n        minLast: state.minutes\n          .toLocaleString(\"en-US\", {\n            minimumIntegerDigits: 2,\n            useGrouping: false,\n          })\n          .slice(1, 2),\n       secFirst: state.seconds.toLocaleString(\"en-US\", {minimumIntegerDigits:2, useGrouping: false,}).slice(0,1),\n       secLast: state.seconds\n         .toLocaleString(\"en-US\", {\n           minimumIntegerDigits: 2,\n           useGrouping: false,\n         })\n         .slice(1, 2),\n        // toLocaleString takes number and makes it into a string with 2 integers.\n        // .slice() returns the integer we want to display\n      }))},\n      100  // Update every 0.1 second.\n           // We get our \"counter\" from the set time, which is more reliable.\n           // This interval updates the values, does not keep track of time.\n    );\n  }\n\n  stopTimer() {\n    clearInterval(this.timerID);\n  }\n\n  resetTimer() {\n      this.setState({ \n        // reset initial state\n        counter: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        hourFirst: \"0\",\n        hourLast: \"0\",\n        minFirst: \"0\",\n        minLast: \"0\",\n        secFirst: \"0\",\n        secLast: \"0\",\n      })\n  }\n\n  \n\n  static propTypes = {\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number,\n    hourFirst: PropTypes.string,\n    hoursLast: PropTypes.string,\n    minFirst: PropTypes.string,\n    minLast: PropTypes.string,\n    secFirst: PropTypes.string,\n    secLast: PropTypes.string,\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"timer\">\n          <div className=\"timer-box\">\n            <i className=\"bi-alarm\"></i>\n          </div>\n          <div className=\"timer-box\">{this.state.hourFirst}</div>\n          <div className=\"timer-box\">{this.state.hourLast}</div>\n          <div className=\"timer-box\">{this.state.minFirst}</div>\n          <div className=\"timer-box\">{this.state.minLast}</div>\n          <div className=\"timer-box\">{this.state.secFirst}</div>\n          <div className=\"timer-box\">{this.state.secLast}</div>\n          {/*display of single integer per box*/}\n        </div>\n        <div>\n        <Button content=\"Start\" onClick={this.startTimer} />\n        <Button content=\"Stop\"  onClick={this.stopTimer} />\n        <Button content=\"Reset\"  onClick={this.resetTimer} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import './App.css';\nimport Timer from './components/Timer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}