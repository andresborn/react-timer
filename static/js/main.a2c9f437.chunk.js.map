{"version":3,"sources":["components/Button.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","style","margin","onClick","content","Timer","startTimer","bind","stopTimer","resetTimer","state","counter","hours","minutes","seconds","hourFirst","hourLast","minFirst","minLast","secFirst","secLast","this","timerID","setInterval","count","clearInterval","setState","Math","floor","toLocaleString","minimumIntegerDigits","useGrouping","slice","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2c9f437.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Button = props => {\n    return (\n        <button className=\"button\" style={{margin: \"0 1px\"}} onClick={props.onClick}>\n            {props.content}\n        </button>\n    )\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"./Button.js\";\n\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.state = {\n      // set initial state\n      counter: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      hourFirst: \"0\",\n      hourLast: \"0\",\n      minFirst: \"0\",\n      minLast: \"0\",\n      secFirst: \"0\",\n      secLast: \"0\",\n    };\n  }\n\n  startTimer() {\n    // Starting inmediately after the component has been mounted in DOM\n    this.timerID = setInterval(\n      // and call count() every second\n      () => this.count(),\n      1000\n    );\n  }\n\n  stopTimer() {\n    // If component isn't being used in DOM, stop count(). For performance\n    clearInterval(this.timerID);\n  }\n\n  resetTimer() {\n      this.setState({ \n        // reset initial state\n        counter: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        hourFirst: \"0\",\n        hourLast: \"0\",\n        minFirst: \"0\",\n        minLast: \"0\",\n        secFirst: \"0\",\n        secLast: \"0\",\n      })\n  }\n\n  count() {\n    this.setState((state) => ({\n      counter: state.counter + 1,\n      hours: Math.floor(state.counter / 60 / 60),\n      minutes: Math.floor(state.counter / 60 - state.hours * 60),\n      seconds: state.counter % 60,\n      hourFirst: state.hours\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(0, 1),\n      hourLast: state.hours\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(1, 2),\n      minFirst: state.minutes\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(0, 1),\n      minLast: state.minutes\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(1, 2),\n      secFirst: state.seconds\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(0, 1),\n      secLast: state.seconds\n        .toLocaleString(\"en-US\", {\n          minimumIntegerDigits: 2,\n          useGrouping: false,\n        })\n        .slice(1, 2),\n      // toLocaleString takes number and makes it into a string with 2 integers.\n      // .slice() returns the integer we want to display\n    }));\n  }\n\n  static propTypes = {\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number,\n    hourFirst: PropTypes.string,\n    hoursLast: PropTypes.string,\n    minFirst: PropTypes.string,\n    minLast: PropTypes.string,\n    secFirst: PropTypes.string,\n    secLast: PropTypes.string,\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"timer\">\n          <div className=\"timer-box\">\n            <i className=\"bi-alarm\"></i>\n          </div>\n          <div className=\"timer-box\">{this.state.hourFirst}</div>\n          <div className=\"timer-box\">{this.state.hourLast}</div>\n          <div className=\"timer-box\">{this.state.minFirst}</div>\n          <div className=\"timer-box\">{this.state.minLast}</div>\n          <div className=\"timer-box\">{this.state.secFirst}</div>\n          <div className=\"timer-box\">{this.state.secLast}</div>\n          {/*display of single integer per box*/}\n        </div>\n        <div>\n        <Button content=\"Start\" onClick={this.startTimer} />\n        <Button content=\"Stop\"  onClick={this.stopTimer} />\n        <Button content=\"Reset\"  onClick={this.resetTimer} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import './App.css';\nimport Timer from './components/Timer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}